

# This table records individual parking sessions for users, including entry and exit times along with fee and payment status information.
CREATE TABLE parkingtransactions (
    transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    parking_lot_id INTEGER NOT NULL,
    vehicle_plate TEXT,
    entry_time DATETIME NOT NULL,
    exit_time DATETIME,
    parking_fee REAL, -- equivalent to decimal(8,2)
    payment_status TEXT DEFAULT 'pending' CHECK(payment_status IN ('pending', 'paid', 'cancelled')),
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (parking_lot_id) REFERENCES parkinglots(lot_id)
);

CREATE TRIGGER update_parkingtransactions_updated_at
AFTER UPDATE ON parkingtransactions
FOR EACH ROW
BEGIN
    UPDATE parkingtransactions
    SET updated_at = CURRENT_TIMESTAMP
    WHERE transaction_id = OLD.transaction_id;
END;


# This table stores details about each parking facility, including location, capacity, and current availability.
CREATE TABLE parkinglots (
    lot_id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    address TEXT,
    latitude REAL,
    longitude REAL,
    total_spaces INTEGER NOT NULL,
    available_spaces INTEGER,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TRIGGER update_parkinglots_updated_at
AFTER UPDATE ON parkinglots
FOR EACH ROW
BEGIN
    UPDATE parkinglots 
    SET updated_at = CURRENT_TIMESTAMP 
    WHERE lot_id = OLD.lot_id;
END;

# This table holds AI-generated predictions about parking occupancy and availability. It can be used for forecasting future parking conditions.
CREATE TABLE ai_predictions (
    prediction_id INTEGER PRIMARY KEY AUTOINCREMENT,
    lot_id INTEGER NOT NULL,
    prediction_description TEXT,
    prediction_time DATETIME NOT NULL,
    predicted_occupied_spaces INTEGER,
    predicted_available_spaces INTEGER,
    predicted_occupancy_rate REAL,  -- equivalent to decimal(5,2)
    confidence_score REAL,          -- equivalent to decimal(4,2)
    model_version TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (lot_id) REFERENCES parkinglots(lot_id)
);

# This table manages user information for both customers and system administrators.
CREATE TABLE users (
    user_id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT NOT NULL UNIQUE,
    email TEXT NOT NULL UNIQUE,
    password_hash TEXT NOT NULL,
    phone TEXT,
    user_type TEXT DEFAULT 'customer' CHECK(user_type IN ('customer','admin')),
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

# This table logs payment details linked to parking transactions, including the method, amount, and status of each payment.
CREATE TABLE payments (
    payment_id INTEGER PRIMARY KEY AUTOINCREMENT,
    transaction_id INTEGER NOT NULL,
    amount REAL NOT NULL,  -- equivalent to decimal(8,2)
    payment_method TEXT NOT NULL CHECK(payment_method IN ('credit card', 'debit card', 'mobile wallet', 'cash')),
    payment_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    payment_status TEXT DEFAULT 'pending' CHECK(payment_status IN ('pending', 'completed', 'failed')),
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (transaction_id) REFERENCES parkingtransactions(transaction_id)
);

CREATE TRIGGER update_payments_updated_at
AFTER UPDATE ON payments
FOR EACH ROW
BEGIN
    UPDATE payments
    SET updated_at = CURRENT_TIMESTAMP
    WHERE payment_id = OLD.payment_id;
END;
